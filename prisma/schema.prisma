generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  uuid       String       @default(uuid())
  username   String       @unique
  name       String
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Collection Collection[]
}

model Item {
  id           Int           @id @default(autoincrement())
  uuid         String        @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @db.VarChar(255)
  quantity     Int
  description  String        @db.VarChar(255)
  collectionId Int
  collection   Collection    @relation(fields: [collectionId], references: [id])
  Tags         Tags[]
  ItemHistory  ItemHistory[]
}

model Collection {
  id        Int        @id @default(autoincrement())
  uuid      String     @default(uuid())
  name      String     @db.VarChar(255)
  ownerId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
  owner     User       @relation(fields: [ownerId], references: [id])
  Item      Item[]
  Tags      Tags[]

  @@unique([name, ownerId], name: "ownedCollection")
}

model Category {
  id           Int        @id @default(autoincrement())
  uuid         String     @default(uuid())
  name         String     @db.VarChar(255)
  filterBy     String     @db.VarChar(127)
  startQty     Int
  endQty       Int
  collectionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  Tags         Tags[]
}

model Tags {
  id           Int        @id @default(autoincrement())
  uuid         String     @default(uuid())
  name         String     @unique @db.VarChar(255)
  collectionId Int
  categoryId   Int
  itemId       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  category     Category   @relation(fields: [categoryId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  item         Item       @relation(fields: [itemId], references: [id])
}

model ItemHistory {
  id        Int      @id @default(autoincrement())
  changes   Json?
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  createdAt DateTime @default(now())
}
